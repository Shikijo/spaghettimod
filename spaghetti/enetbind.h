#ifdef INSTANTIATE

#define enum(v) static auto enum_##v = v;

#else

#define enum(v) .addVariable(#v, &enum_##v, false)

#endif

enum(ENET_SOCKET_NULL)
enum(ENET_PROTOCOL_MINIMUM_MTU)
enum(ENET_PROTOCOL_MAXIMUM_MTU)
enum(ENET_PROTOCOL_MAXIMUM_PACKET_COMMANDS)
enum(ENET_PROTOCOL_MINIMUM_WINDOW_SIZE)
enum(ENET_PROTOCOL_MAXIMUM_WINDOW_SIZE)
enum(ENET_PROTOCOL_MINIMUM_CHANNEL_COUNT)
enum(ENET_PROTOCOL_MAXIMUM_CHANNEL_COUNT)
enum(ENET_PROTOCOL_MAXIMUM_PEER_ID)
enum(ENET_PROTOCOL_MAXIMUM_PACKET_SIZE)
enum(ENET_PROTOCOL_MAXIMUM_FRAGMENT_COUNT)
enum(ENET_PROTOCOL_COMMAND_NONE)
enum(ENET_PROTOCOL_COMMAND_ACKNOWLEDGE)
enum(ENET_PROTOCOL_COMMAND_CONNECT)
enum(ENET_PROTOCOL_COMMAND_VERIFY_CONNECT)
enum(ENET_PROTOCOL_COMMAND_DISCONNECT)
enum(ENET_PROTOCOL_COMMAND_PING)
enum(ENET_PROTOCOL_COMMAND_SEND_RELIABLE)
enum(ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE)
enum(ENET_PROTOCOL_COMMAND_SEND_FRAGMENT)
enum(ENET_PROTOCOL_COMMAND_SEND_UNSEQUENCED)
enum(ENET_PROTOCOL_COMMAND_BANDWIDTH_LIMIT)
enum(ENET_PROTOCOL_COMMAND_THROTTLE_CONFIGURE)
enum(ENET_PROTOCOL_COMMAND_SEND_UNRELIABLE_FRAGMENT)
enum(ENET_PROTOCOL_COMMAND_COUNT)
enum(ENET_PROTOCOL_COMMAND_MASK)
enum(ENET_PROTOCOL_COMMAND_FLAG_ACKNOWLEDGE)
enum(ENET_PROTOCOL_COMMAND_FLAG_UNSEQUENCED)
enum(ENET_PROTOCOL_HEADER_FLAG_COMPRESSED)
enum(ENET_PROTOCOL_HEADER_FLAG_SENT_TIME)
enum(ENET_PROTOCOL_HEADER_SESSION_MASK)
enum(ENET_PROTOCOL_HEADER_SESSION_SHIFT)
enum(ENET_VERSION_MAJOR)
enum(ENET_VERSION_MINOR)
enum(ENET_VERSION_PATCH)
enum(ENET_SOCKET_TYPE_STREAM)
enum(ENET_SOCKET_TYPE_DATAGRAM)
enum(ENET_SOCKET_WAIT_NONE)
enum(ENET_SOCKET_WAIT_SEND)
enum(ENET_SOCKET_WAIT_RECEIVE)
enum(ENET_SOCKET_WAIT_INTERRUPT)
enum(ENET_SOCKOPT_NONBLOCK)
enum(ENET_SOCKOPT_BROADCAST)
enum(ENET_SOCKOPT_RCVBUF)
enum(ENET_SOCKOPT_SNDBUF)
enum(ENET_SOCKOPT_REUSEADDR)
enum(ENET_SOCKOPT_RCVTIMEO)
enum(ENET_SOCKOPT_SNDTIMEO)
enum(ENET_SOCKOPT_ERROR)
enum(ENET_SOCKOPT_NODELAY)
enum(ENET_SOCKET_SHUTDOWN_READ)
enum(ENET_SOCKET_SHUTDOWN_WRITE)
enum(ENET_SOCKET_SHUTDOWN_READ_WRITE)
enum(ENET_HOST_ANY)
enum(ENET_HOST_BROADCAST)
enum(ENET_PORT_ANY)
enum(ENET_PACKET_FLAG_RELIABLE)
enum(ENET_PACKET_FLAG_UNSEQUENCED)
enum(ENET_PACKET_FLAG_NO_ALLOCATE)
enum(ENET_PACKET_FLAG_UNRELIABLE_FRAGMENT)
enum(ENET_PACKET_FLAG_SENT)
enum(ENET_PEER_STATE_DISCONNECTED)
enum(ENET_PEER_STATE_CONNECTING)
enum(ENET_PEER_STATE_ACKNOWLEDGING_CONNECT)
enum(ENET_PEER_STATE_CONNECTION_PENDING)
enum(ENET_PEER_STATE_CONNECTION_SUCCEEDED)
enum(ENET_PEER_STATE_CONNECTED)
enum(ENET_PEER_STATE_DISCONNECT_LATER)
enum(ENET_PEER_STATE_DISCONNECTING)
enum(ENET_PEER_STATE_ACKNOWLEDGING_DISCONNECT)
enum(ENET_PEER_STATE_ZOMBIE)
enum(ENET_BUFFER_MAXIMUM)
enum(ENET_HOST_RECEIVE_BUFFER_SIZE)
enum(ENET_HOST_SEND_BUFFER_SIZE)
enum(ENET_HOST_BANDWIDTH_THROTTLE_INTERVAL)
enum(ENET_HOST_DEFAULT_MTU)
enum(ENET_PEER_DEFAULT_ROUND_TRIP_TIME)
enum(ENET_PEER_DEFAULT_PACKET_THROTTLE)
enum(ENET_PEER_PACKET_THROTTLE_SCALE)
enum(ENET_PEER_PACKET_THROTTLE_COUNTER)
enum(ENET_PEER_PACKET_THROTTLE_ACCELERATION)
enum(ENET_PEER_PACKET_THROTTLE_DECELERATION)
enum(ENET_PEER_PACKET_THROTTLE_INTERVAL)
enum(ENET_PEER_PACKET_LOSS_SCALE)
enum(ENET_PEER_PACKET_LOSS_INTERVAL)
enum(ENET_PEER_WINDOW_SIZE_SCALE)
enum(ENET_PEER_TIMEOUT_LIMIT)
enum(ENET_PEER_TIMEOUT_MINIMUM)
enum(ENET_PEER_TIMEOUT_MAXIMUM)
enum(ENET_PEER_PING_INTERVAL)
enum(ENET_PEER_UNSEQUENCED_WINDOWS)
enum(ENET_PEER_UNSEQUENCED_WINDOW_SIZE)
enum(ENET_PEER_FREE_UNSEQUENCED_WINDOWS)
enum(ENET_PEER_RELIABLE_WINDOWS)
enum(ENET_PEER_RELIABLE_WINDOW_SIZE)
enum(ENET_PEER_FREE_RELIABLE_WINDOWS)
enum(ENET_EVENT_TYPE_NONE)
enum(ENET_EVENT_TYPE_CONNECT)
enum(ENET_EVENT_TYPE_DISCONNECT)
enum(ENET_EVENT_TYPE_RECEIVE)

#undef enum

#ifdef INSTANTIATE

#else

.addFunction("ENET_HOST_TO_NET_16", htons)
.addFunction("ENET_HOST_TO_NET_32", htonl)
.addFunction("ENET_NET_TO_HOST_16", ntohs)
.addFunction("ENET_NET_TO_HOST_32", ntohl)

.beginClass<ENetHost>("ENetHost")
.endClass()
.addVariable("serverhost", &serverhost)
.addFunction("enet_host_flush", &enet_host_flush)

#endif
